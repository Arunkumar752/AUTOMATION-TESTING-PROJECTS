testUtils = {

    ValidateKeyValue: function (RespObj,SearchKeyVal,Expectedvalue){
    const KeyList=Object.getOwnPropertyNames(RespObj);
    var value = null;
    for(let Key in KeyList){
        if(RespObj[KeyList[Key]]&& typeof RespObj[KeyList[Key]]==='object'&& SearchKeyVal != KeyList[Key]){
            console.log("It is Object");
            Value = testUtils.ValidateKeyValue(RespObj[KeyList[Key]],SearchKeyVal,Expectedvalue);

        }
        if(KeyList[Key]==(SearchKeyVal)){
            Value=RespObj[KeyList[Key]];
            if(typeof Value === 'object'){
            var Result = (JSON.stringify(Value) === JSON.stringify(Expectedvalue)) ? true : false;
            }

            else{

            var Result = (Value === Expectedvalue) ? true : false; 
            }
            return Result
            //  console.log(Result)
            break;
        }
    }
},

    GetvalueFromObject: function (pm,RespObj,SearchKeyVal){
    const KeyList=Object.getOwnPropertyNames(RespObj);
    var value = null;
    for(let Key in KeyList){
        if(RespObj[KeyList[Key]]&& typeof RespObj[KeyList[Key]]==='object'&& SearchKeyVal != KeyList[Key]){
            Value = testUtils.GetvalueFromObject(RespObj[KeyList[Key]],SearchKeyVal);

        }

        if(KeyList[Key]==(SearchKeyVal)){
            Value=RespObj[KeyList[Key]];
            return value
            //  console.log(JSON.stringify(Value))
            break;
        }
    }
},


    UpdateDate: function (val,Type) {
    
    if(Type=="D"){
        const tm = new Date();
        tm.setDate(new Date().getDate() + (val))
        // console.log(tm)
        return tm.toLocaleDateString('en-GB')

    }
    else if(Type=="M"){
        const tm = new Date();
        tm.setMonth(new Date().getMonth() + (val))
        // console.log(tm)
        return tm.toLocaleDateString('en-GB')

    }
        else if(Type=="Y"){
            const tm = new Date();
            tm.setFullYear(new Date().getFullYear() + (val))
            // console.log(tm)
        return tm.toLocaleDateString('en-GB')
    
        }    


},

    GetObjectLength: function (RespObj,SearchKeyVal){
    const KeyList=Object.getOwnPropertyNames(RespObj);
    var value = null;
    for(let Key in KeyList){
        if(RespObj[KeyList[Key]]&& typeof RespObj[KeyList[Key]]==='object'&& SearchKeyVal != KeyList[Key]){
            console.log("It is Object");
            Value = GetObjectLength(RespObj[KeyList[Key]],SearchKeyVal,Expectedvalue);
        }

        if(KeyList[Key]==(SearchKeyVal)){
            Value=RespObj[KeyList[Key]];
            if(typeof Value === 'object'){
           var Objlen = Object.keys(Value).length;

            }
            else{
            var Objlen = 0;

            }
            //  console.log(Objlen)
            return Objlen
            // break;
        }
    }
},




   removeProperty: function (object, propToDelete) {
        Object
            .keys(object)
            .forEach(key => {
                const val = object[key];

                // If dealing with an object, removeProperty in it.
                if (val && typeof val === 'object') {
                    testUtils.removeProperty(val);
                }

                // If deleteable, delete and return
                if (key === propToDelete) {
                    delete object[key];
                    return object;
                }
            });
        return object;
    },
    
     //method to validate/verify response status code is 200 (OK)
    verfiyResponseSuccessStatusCode: function (pm, description) {
        pm.test("Verfied "+description+" - Success -200", () => {
            pm.response.to.have.status(200);
            pm.response.to.have.jsonBody;
        });
    },
    
     VerifyXMLFieldAndValueInIBL: function(pm,Object,field,value,desc){
        pm.test("Verfied "+desc+" - "+value, ()=> {
            var responseData = pm.response.text();
            const Res = cheerio.load(responseData, {
            ignoreWhitespace: true,
            xmlMode: true
            });
            let DocType= Res(Object).find(field);
            console.log(DocType.text())
            pm.expect(DocType.text()).to.eql(value);
        }
        );},

          FetchXMLFieldAndValue: function(pm,Object,field){
            var responseData = pm.response.text();
            const Res = cheerio.load(responseData, {
            ignoreWhitespace: true,
            xmlMode: true
            });
            let DocType= Res(Object).find(field);
            // console.log(DocType.text())   
             return DocType.text();
        },
       
               },
                    verifyStatusMessage: function (pm, Status, description) {
        pm.test(description, () => {
            const Actresponse = pm.response.json();
            if( Actresponse.hasOwnProperty("status")==true){           
            pm.expect(Status).is.to.include(Actresponse.status);
            }else{
                pm.expect.fail("No Error Message found.");
            }
        })
     } , generateString: function(length) {
    
    const characters ='ABCDEFGHIJKLMNOPQ0123456789123456789';
    let result = '';
    const charactersLength = characters.length;
    for ( let i = 0; i < length; i++ ) {
        result += characters.charAt(Math.floor(Math.random() * charactersLength));
    }

    return result;
},
 verifyFieldNullOrNot : function (pm,description) {        
           pm.test("Verfied "+description, ()=> {
            const jsonData = pm.response.json()
            if(jsonData.returnPDF == null)
            {
                pm.expect.fail(jsonData.returnPDF)
            }
            else{
                pm.expect(jsonData.returnPDF).not.equal(null)
            }
    });},

const  FutureDate= testUtils.UpdateDate(10,"D")
pm.collectionVariables.set("cv_FutureDate",FutureDate);
const PreviousDtae = testUtils.UpdateDate(-10,"D")
pm.collectionVariables.set("cv_PreviousDate",PreviousDtae);
const currentDate = testUtils.UpdateDate(0,"D")
pm.collectionVariables.set("cv_CurrentDate", currentDate);
